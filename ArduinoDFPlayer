#include <DFPlayerMini.h>
#include <SoftwareSerial.h>
#include <DFPlayer_Mini_Mp3.h>
#define BUTTON_PIN 2
int buttonState = 0;
int iDebounce = 0;
int iStatus = 0;
int timer = 0;
int iSong = 0;
int iSongNum = 0;
void setup () {
  Serial.begin (9600);
  pinMode(BUTTON_PIN, INPUT);
  mp3_set_serial (Serial);  //set Serial for DFPlayer-mini mp3 module
  mp3_set_volume (20);
}


void loop () {
  while (timer < 1000) {

    buttonState = digitalRead(BUTTON_PIN);
    iDebounce++;
    if (iDebounce > 100) {
      timer++;
      iDebounce = 0;
    }
    if (buttonState == HIGH) {
      Serial.print("HIGH");
      Serial.print("iSong= ");
      Serial.print(iSong);
      Serial.print("iSongNum= ");
      Serial.print(iSongNum);
      Serial.print("timer= ");
      Serial.print(timer);
      Serial.print(" iDebounce= ");
      Serial.println(iDebounce);

      if (iSongNum == 1 && timer == 0 && iDebounce == 1) {
        timer = 45 ;
        iDebounce = 0;
        Serial.print("play@2222");
        if (timer == 45 && iDebounce == 0) {
          iSong = 2;
          mp3_play (2);
        }
      } else if (iSongNum == 2 && timer == 0 && iDebounce == 1) {
        timer = 92 ;
        iDebounce = 0;
        Serial.print("play@3333");
        if (timer == 92 && iDebounce == 0) {
          iSong = 3;
          mp3_play (3);
        }
      } else if (iSongNum == 3 && timer == 0 && iDebounce == 1) {
        timer = 126 ;
        iDebounce = 0;
        Serial.print("play@4444");
        if (timer == 126 && iDebounce == 0) {
          iSong = 4;
          mp3_play (4);
        }

      } else if (iSongNum == 4 && timer == 0 && iDebounce == 1) {
        timer = 213 ;
        iDebounce = 0;
        Serial.print("play@5555");
        if (timer == 213 && iDebounce == 0) {
          iSong = 5;
          mp3_play (5);
        }

      }else if (iSongNum == 5 && timer == 0 && iDebounce == 1) {
        timer = 269 ;
        iDebounce = 5;
        Serial.print("play@6666");
        if (timer == 269 && iDebounce == 5) {
          iSong = 6;
          mp3_play (6);
        }
      } else if (iSongNum == 6 && timer == 0 && iDebounce == 1) {
        timer = 0 ;
        iDebounce = 5;
        Serial.print("play@1111");
        if (timer == 0 && iDebounce == 5) {
          iSong = 1;
          mp3_play (1);
        }
      }else if (iSongNum == 0 && timer == 0 && iDebounce == 1) {
        timer = 0 ;
        iDebounce = 5;
        Serial.print("play@1111");
        if (timer == 0 && iDebounce == 5) {
          iSong = 1;
          mp3_play (1);
        }
      }


//////////////連續
      if (timer == 0 && iDebounce == 1) {
        iSong = 1;
        mp3_play (1);
        Serial.print("Countiplay@1111");
      } else  if (timer == 45 && iDebounce == 0) {
        iSong = 2;
        mp3_play (2);
        Serial.print("Countiplay@2222");
      }else  if (timer == 92 && iDebounce == 0) {
        iSong = 3;
        mp3_play (3);
        Serial.print("Countiplay@3333");
      }else  if (timer == 126 && iDebounce == 0) {
        iSong = 4;
        mp3_play (4);
        Serial.print("Countiplay@4444");
      }else if(timer == 213 && iDebounce == 0){
        iSong = 5;
        mp3_play (5);
        Serial.print("Countiplay@5555");
      }else if(timer == 269 && iDebounce == 0){
       iSong = 6;
        mp3_play (6);
        Serial.print("Countiplay@6666");
      }else if(timer == 329 && iDebounce == 0){
        timer=0;
        iDebounce=0;
      }


    } else if (buttonState == LOW) {
      Serial.print("LOW");
      Serial.print("iSong= ");
      Serial.print(iSong);
      Serial.print("iSongNum= ");
      Serial.print(iSongNum);
      Serial.print("timer= ");
      Serial.print(timer);
      Serial.print(" iDebounce= ");
      Serial.println(iDebounce);
      iSongNum = iSong;
      timer = 0;
      iDebounce = 0;
      mp3_stop ();
    }
  }
  iSongNum = 0;
  iSong = 0;
  timer = 0;
  iDebounce = 0;
  mp3_stop ();
}
/*
   mp3_play ();   //start play
   mp3_play (5);  //play "mp3/0005.mp3"
   mp3_next ();   //play next
   mp3_prev ();   //play previous
   mp3_set_volume (uint16_t volume);  //0~30
   mp3_set_EQ (); //0~5
   mp3_pause ();
   mp3_stop ();
   void mp3_get_state ();   //send get state command
   void mp3_get_volume ();
   void mp3_get_u_sum ();
   void mp3_get_tf_sum ();
   void mp3_get_flash_sum ();
   void mp3_get_tf_current ();
   void mp3_get_u_current ();
   void mp3_get_flash_current ();
   void mp3_single_loop (boolean state);  //set single loop
   void mp3_DAC (boolean state);
   void mp3_random_play ();
*/
